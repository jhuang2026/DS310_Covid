{
	"name": "ODS_dataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Parquet3",
						"type": "DatasetReference"
					},
					"name": "VMmetrics",
					"description": "Import data from VM Covid19 metrics"
				},
				{
					"dataset": {
						"referenceName": "COVID_Country_Combined",
						"type": "DatasetReference"
					},
					"name": "AZmetrics"
				},
				{
					"dataset": {
						"referenceName": "VM_countries_data",
						"type": "DatasetReference"
					},
					"name": "VMcountries"
				},
				{
					"dataset": {
						"referenceName": "az_countries_data",
						"type": "DatasetReference"
					},
					"name": "AZcountries"
				},
				{
					"dataset": {
						"referenceName": "vm_dates_data",
						"type": "DatasetReference"
					},
					"name": "VMdates"
				},
				{
					"dataset": {
						"referenceName": "az_dates_data",
						"type": "DatasetReference"
					},
					"name": "AZdates"
				},
				{
					"dataset": {
						"referenceName": "cosmos_policy_parquet",
						"type": "DatasetReference"
					},
					"name": "CDBpolicy"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "CasesSinkODS",
						"type": "DatasetReference"
					},
					"name": "CasesSink"
				},
				{
					"dataset": {
						"referenceName": "RecovSinkODS",
						"type": "DatasetReference"
					},
					"name": "RecovSink"
				},
				{
					"dataset": {
						"referenceName": "DeathsSinkODS",
						"type": "DatasetReference"
					},
					"name": "DeathsSink"
				},
				{
					"dataset": {
						"referenceName": "GeoSinkODS",
						"type": "DatasetReference"
					},
					"name": "GeoSink"
				},
				{
					"dataset": {
						"referenceName": "DatesODS",
						"type": "DatasetReference"
					},
					"name": "DatesSink"
				},
				{
					"dataset": {
						"referenceName": "PolicyODS",
						"type": "DatasetReference"
					},
					"name": "PolicySink"
				}
			],
			"transformations": [
				{
					"name": "UnionMetrics",
					"description": "Combining rows from transformation 'AZmetrics' and 'VMmetrics'"
				},
				{
					"name": "CasesSelect"
				},
				{
					"name": "DeathsSelect"
				},
				{
					"name": "RecovSelect"
				},
				{
					"name": "UnionGeo"
				},
				{
					"name": "GeoSelect"
				},
				{
					"name": "UnionDates"
				},
				{
					"name": "DatesSelect"
				},
				{
					"name": "PolicySelect"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ID as integer,",
				"          Updated as date,",
				"          Confirmed as integer,",
				"          Confirmed_Change as integer,",
				"          Deaths as integer,",
				"          Deaths_Change as integer,",
				"          Recovered as integer,",
				"          Recovered_Change as integer,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5),",
				"          ISO2 as string,",
				"          ISO3 as string,",
				"          Country_Region as string,",
				"          load_time as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> VMmetrics",
				"source(output(",
				"          ID as integer,",
				"          Updated as date,",
				"          Confirmed as integer,",
				"          Confirmed_Change as integer,",
				"          Deaths as integer,",
				"          Deaths_Change as integer,",
				"          Recovered as integer,",
				"          Recovered_Change as integer,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5),",
				"          ISO2 as string,",
				"          ISO3 as string,",
				"          Country_Region as string,",
				"          load_time as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> AZmetrics",
				"source(output(",
				"          Country as string,",
				"          CountryCode as string,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> VMcountries",
				"source(output(",
				"          Country as string,",
				"          CountryCode as string,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> AZcountries",
				"source(output(",
				"          DateKey as integer,",
				"          FullDate as date,",
				"          isWeekDay as boolean,",
				"          DayOfWeek as integer,",
				"          DayOfMonth as integer,",
				"          DayOfQuarter as integer,",
				"          DayOfYear as integer,",
				"          DayName as string,",
				"          WeekOfYear as integer,",
				"          WeekName as string,",
				"          MonthOfYear as integer,",
				"          MonthName as string,",
				"          CalendarQuarter as integer,",
				"          CalendarQuarterName as string,",
				"          CalendarYear as integer,",
				"          FiscalMonth as integer,",
				"          FiscalMonthName as string,",
				"          FiscalQuarter as integer,",
				"          FiscalQuarterName as string,",
				"          FiscalYear as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> VMdates",
				"source(output(",
				"          DateKey as integer,",
				"          FullDate as date,",
				"          isWeekDay as boolean,",
				"          DayOfWeek as integer,",
				"          DayOfMonth as integer,",
				"          DayOfQuarter as integer,",
				"          DayOfYear as integer,",
				"          DayName as string,",
				"          WeekOfYear as integer,",
				"          WeekName as string,",
				"          MonthOfYear as integer,",
				"          MonthName as string,",
				"          CalendarQuarter as integer,",
				"          CalendarQuarterName as string,",
				"          CalendarYear as integer,",
				"          FiscalMonth as integer,",
				"          FiscalMonthName as string,",
				"          FiscalQuarter as integer,",
				"          FiscalQuarterName as string,",
				"          FiscalYear as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> AZdates",
				"source(output(",
				"          CountryName as string,",
				"          CountryCode as string,",
				"          RegionName as string,",
				"          RegionCode as string,",
				"          Jurisdiction as string,",
				"          Date as timestamp,",
				"          C1_School_closing as decimal(38,18),",
				"          C1_Flag as decimal(38,18),",
				"          C2_Workplace_closing as decimal(38,18),",
				"          C2_Flag as decimal(38,18),",
				"          C3_Cancel_public_events as decimal(38,18),",
				"          C3_Flag as decimal(38,18),",
				"          C4_Restrictions_on_gatherings as decimal(38,18),",
				"          C4_Flag as decimal(38,18),",
				"          C5_Close_public_transport as decimal(38,18),",
				"          C5_Flag as decimal(38,18),",
				"          C6_Stay_at_home_requirements as decimal(38,18),",
				"          C6_Flag as decimal(38,18),",
				"          C7_Restrictions_on_internal_movement as decimal(38,18),",
				"          C7_Flag as decimal(38,18),",
				"          C8_International_travel_controls as decimal(38,18),",
				"          E1_Income_support as decimal(38,18),",
				"          E1_Flag as decimal(38,18),",
				"          E2_Debt_contract_relief as decimal(38,18),",
				"          E3_Fiscal_measures as decimal(38,18),",
				"          E4_International_support as decimal(38,18),",
				"          H1_Public_information_campaigns as decimal(38,18),",
				"          H1_Flag as decimal(38,18),",
				"          H2_Testing_policy as decimal(38,18),",
				"          H3_Contact_tracing as decimal(38,18),",
				"          H4_Emergency_investment_in_healthcare as decimal(38,18),",
				"          H5_Investment_in_vaccines as decimal(38,18),",
				"          H6_Facial_Coverings as decimal(38,18),",
				"          H6_Flag as decimal(38,18),",
				"          H7_Vaccination_policy as decimal(38,18),",
				"          H7_Flag as decimal(38,18),",
				"          H8_Protection_of_elderly_people as decimal(38,18),",
				"          H8_Flag as decimal(38,18),",
				"          M1_Wildcard as decimal(38,18),",
				"          StringencyIndex as decimal(38,18),",
				"          StringencyIndexForDisplay as decimal(38,18),",
				"          StringencyLegacyIndex as decimal(38,18),",
				"          StringencyLegacyIndexForDisplay as decimal(38,18),",
				"          GovernmentResponseIndex as decimal(38,18),",
				"          GovernmentResponseIndexForDisplay as decimal(38,18),",
				"          ContainmentHealthIndex as decimal(38,18),",
				"          ContainmentHealthIndexForDisplay as decimal(38,18),",
				"          EconomicSupportIndex as decimal(38,18),",
				"          EconomicSupportIndexForDisplay as decimal(38,18),",
				"          id as string,",
				"          {_rid} as string,",
				"          {_self} as string,",
				"          {_etag} as string,",
				"          {_attachments} as string,",
				"          {_ts} as decimal(38,18)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     inferDriftedColumnTypes: true,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> CDBpolicy",
				"AZmetrics, VMmetrics union(byName: true)~> UnionMetrics",
				"UnionMetrics select(mapColumn(",
				"          ID,",
				"          Updated,",
				"          Confirmed,",
				"          Confirmed_Change,",
				"          Latitude,",
				"          Longitude,",
				"          ISO2,",
				"          ISO3,",
				"          Country_Region",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> CasesSelect",
				"UnionMetrics select(mapColumn(",
				"          ID,",
				"          Updated,",
				"          Deaths,",
				"          Deaths_Change,",
				"          Latitude,",
				"          Longitude,",
				"          ISO2,",
				"          ISO3,",
				"          Country_Region",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DeathsSelect",
				"UnionMetrics select(mapColumn(",
				"          ID,",
				"          Updated,",
				"          Recovered,",
				"          Recovered_Change,",
				"          Latitude,",
				"          Longitude,",
				"          ISO2,",
				"          ISO3,",
				"          Country_Region",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RecovSelect",
				"VMcountries, AZcountries union(byName: true)~> UnionGeo",
				"UnionGeo select(mapColumn(",
				"          Country,",
				"          CountryCode,",
				"          Latitude,",
				"          Longitude",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> GeoSelect",
				"VMdates, AZdates union(byName: true)~> UnionDates",
				"UnionDates select(mapColumn(",
				"          DateKey,",
				"          FullDate,",
				"          isWeekDay,",
				"          DayOfWeek,",
				"          DayOfMonth,",
				"          DayOfQuarter,",
				"          DayOfYear,",
				"          DayName,",
				"          WeekOfYear,",
				"          WeekName,",
				"          MonthOfYear,",
				"          MonthName,",
				"          CalendarQuarter,",
				"          CalendarQuarterName,",
				"          CalendarYear,",
				"          FiscalMonth,",
				"          FiscalMonthName,",
				"          FiscalQuarter,",
				"          FiscalQuarterName,",
				"          FiscalYear",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DatesSelect",
				"CDBpolicy select(skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> PolicySelect",
				"CasesSelect sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['cases'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> CasesSink",
				"RecovSelect sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['recoveries'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> RecovSink",
				"DeathsSelect sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['deaths'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> DeathsSink",
				"GeoSelect sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['geography'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> GeoSink",
				"DatesSelect sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['dates'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> DatesSink",
				"PolicySelect sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['policy'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> PolicySink"
			]
		}
	}
}